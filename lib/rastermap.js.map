{"version":3,"file":"rastermap.js","sources":["../src/Tools.js","../src/RasterMap.js","../src/index.js"],"sourcesContent":["\nfunction deg2rad(deg) {\n  return deg * (Math.PI/180)\n}\n\n/**\n * Get the distance between two points, each being a pair of latitude and longitude.\n * This methods uses the haversine formula to calculate along the great circle.\n * Source: https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula\n *         and https://www.movable-type.co.uk/scripts/latlong.html\n * @param {Object} a - the point a, of form {lat: Number, long: Number}\n * @param {Object} b - the point b, of form {lat: Number, long: Number}\n * @return {Number} distance in meters\n */\nexport function greatCircleDistance(pointA, pointB){\n  const R = 6371e3; // Radius of the earth in m\n  let dLat = deg2rad(pointB.lat-pointA.lat)\n  let dLon = deg2rad(pointB.lon-pointA.lon)\n  let a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n          Math.cos(deg2rad(pointA.lat)) * Math.cos(deg2rad(pointB.lat)) *\n          Math.sin(dLon/2) * Math.sin(dLon/2)\n  let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n  let d = R * c\n  return d\n}\n","import { greatCircleDistance } from './Tools'\n\n/**\n * RasterMap uses the center-pixel convention.\n */\nclass RasterMap {\n\n  /**\n   * Constructor: allocates the raster image\n   * @param {Object} min - bottom left point such as {lat: Number, lon: Number}\n   * @param {Object} max - top right point such as {lat: Number, lon: Number}\n   * @param {Number} longestPixelSize - number of pixel on the longest side of the image,\n   * @param {boolean} alphaToMax - OPTIONAL - puts the alpha channel to 255 if true. Leaves it at zero is false (default: true)\n   * whether it's along the S-N axis or the W-E axis\n   */\n  constructor(min, max, longestPixelSize, alphaToMax=true){\n    this._rasterSize = {\n      width: null,\n      height: null\n    }\n\n    this._corners = {\n      bottomLeft: min,\n      topRight: max,\n      bottomRight: {lat: min.lat, lon: max.lon},\n      topLeft: {lat: max.lat, lon: min.lon}\n    }\n\n    // in meters\n    let southToNorthDistance = greatCircleDistance(this._corners.bottomLeft, this._corners.topLeft)\n    let westToEastDistance = greatCircleDistance(this._corners.bottomLeft, this._corners.bottomRight)\n\n    this._meterSize = {\n      width: westToEastDistance,\n      height: southToNorthDistance\n    }\n\n    this._angleSize = {\n      height: max.lat - min.lat,\n      width: max.lon - min.lon\n    }\n\n    if(southToNorthDistance > westToEastDistance){\n      // portrait image\n      this._rasterSize.height = longestPixelSize\n      this._rasterSize.width = Math.ceil(longestPixelSize * (westToEastDistance / southToNorthDistance))\n    } else {\n      // landscape image\n      this._rasterSize.width = longestPixelSize\n      this._rasterSize.height = Math.ceil(longestPixelSize * (southToNorthDistance / westToEastDistance))\n    }\n\n    this._anglePerPixel = {\n      width: this._angleSize.width / this._rasterSize.width,\n      height: this._angleSize.height / this._rasterSize.height,\n    }\n\n    this._pixelPerAngle = {\n      width:  this._rasterSize.width / this._angleSize.width,\n      height: this._rasterSize.height / this._angleSize.height,\n    }\n\n    // number of components per pixel = 4 (RGBA)\n    this._ncpp = 4\n    this._buffer = new Uint8Array(this._rasterSize.height * this._rasterSize.width * this._ncpp)\n\n    if(alphaToMax){\n      for(let i=3; i<this._buffer.length; i+=this._ncpp){\n        this._buffer[i] = 255\n      }\n    }\n  }\n\n\n  getRasterWidth(){\n    return this._rasterSize.width\n  }\n\n\n  getRasterHeight(){\n    return this._rasterSize.height\n  }\n\n  getRasterData(){\n    return this._buffer\n  }\n\n\n  /**\n   * Transform a geo position (lat, lon) to a raster position (x, y), as long as this\n   * geo position is within the boundaries of this rasterMap.\n   * @param {Object} geoPos - geographic point in {lat: Number, lon: number}\n   * @param {boolean} nn - round it to the nearest neighbor raster position (default: true)\n   * @return {Object} raster position such as {x: Number, y: Number}\n   */\n  geoPosToRasterPos(geoPos, nn=true){\n    if(geoPos.lat <= this._corners.bottomLeft.lat ||\n       geoPos.lat >= this._corners.topLeft.lat ||\n       geoPos.lon <= this._corners.bottomLeft.lon ||\n       geoPos.lon >= this._corners.bottomRight.lon ){\n      throw new Error('The geo position is out of bound')\n    }\n\n    let x = (geoPos.lon - this._corners.bottomLeft.lon) * this._pixelPerAngle.width\n    let y = this._rasterSize.height - (geoPos.lat - this._corners.bottomLeft.lat) * this._pixelPerAngle.height - 1\n\n    if(nn){\n      x = Math.round(x)\n      y = Math.round(y)\n    }\n\n    return {x: x, y: y}\n  }\n\n\n  /**\n   * Transform a raster position (x, y) into a geo position (lat, lon), as long as this\n   * raster position is within the boundaries of this rasterMap.\n   * @param {Object} rasterPos - raster position such as {x: Number, y: Number}\n   * @return {Object} a geo position such as {lat: Number, lon: number}\n   */\n  rasterPosToGeoPos(rasterPos){\n    if(rasterPos.x < 0 || rasterPos.x >= this._rasterSize.width ||\n       rasterPos.y < 0 || rasterPos.y >= this._rasterSize.height){\n      throw new Error('The raster position is out of bound')\n    }\n\n    let lon = this._corners.bottomLeft.lon + rasterPos.x * this._anglePerPixel.width\n    let lat = this._corners.bottomLeft.lat + (this._rasterSize.height - rasterPos.y - 1) * this._anglePerPixel.height\n\n    return {\n      lat: lat,\n      lon: lon\n    }\n  }\n\n\n  /**\n   * Transform a raster position (x, y) into a the 1D position within the buffer.\n   * Note that the position is the position in the buffer of the first component (red)\n   * over the 4 (RGBA)\n   * @param {Object} rasterPos - raster position such as {x: Number, y: Number}\n   * @return {Number} the position in the buffer\n   */\n  rasterPositionToBufferPosition(rasterPos){\n    if(rasterPos.x < 0 || rasterPos.x >= this._rasterSize.width ||\n       rasterPos.y < 0 || rasterPos.y >= this._rasterSize.height){\n      throw new Error('The raster position is out of bound')\n    }\n\n    return (rasterPos.y * this._rasterSize.width + rasterPos.x) * this._ncpp\n  }\n\n\n  /**\n   * Set the color at a given raster position\n   * @param {Array} color - the color as [r, g, b, a] or as [r, g, b]\n   * @param {Object} rasterPosition - raster position such as {x: Number, y: Number}\n   */\n  setColorRaster(color, rasterPos){\n    let pos1D = this.rasterPositionToBufferPosition(rasterPos)\n\n    if(color.length > this._ncpp){\n      throw new Error(`The color must contain at most ${this._ncpp} elements.`)\n    }\n\n    for(let i=0; i<color.length; i++){\n      this._buffer[pos1D + i] = color[i]\n    }\n  }\n\n\n  /**\n   * Set the color at the given raster position\n   * @param {Array} color - the color as [r, g, b, a] or as [r, g, b]\n   * @param {Object} geoPos - geographic point in {lat: Number, lon: number}\n   */\n  setColorGeo(color, geoPos){\n    let rasterPos = this.geoPosToRasterPos(geoPos)\n    this.setColorRaster(color, rasterPos)\n  }\n\n\n}\n\n\nexport default RasterMap\n","import RasterMap from './RasterMap'\n\nexport default ({\n  RasterMap,\n})\n"],"names":[],"mappings":"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"}